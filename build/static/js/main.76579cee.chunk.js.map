{"version":3,"sources":["services/persons.js","App.js","index.js"],"names":["axios","get","then","response","data","newObject","post","id","put","delete","Person","props","name","number","onClick","handleDelete","setPersons","Filter","value","filter","onChange","handleFilterChange","PersonForm","onSubmit","addPerson","newName","handleNameChange","newNumber","handleNumberChange","type","Persons","filteredPersons","persons","person","toLowerCase","includes","map","key","MessageSuccess","message","style","color","background","fontSize","borderStyle","borderRadius","padding","marginBottom","MessageError","errorMessage","App","useState","setNewName","setNewNumber","setFilter","setMessage","setErrorMessage","useEffect","personService","initialPersons","event","target","preventDefault","personExistsList","length","personExists","updatePersonObject","returnedPerson","setTimeout","window","alert","concat","confirm","error","catch","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.76579cee.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/notes'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n}\n\nconst deleteOne = (id) => {\n    return axios.delete(`${baseUrl}/${id}`)\n}\n\nexport default {\n    getAll,\n    create,\n    update,\n    deleteOne\n}","import React, { useState, useEffect } from 'react'\nimport personService from './services/persons'\n\nconst Person = (props) => {\n    return (\n        <p>\n            <span>{props.name} {props.number}&nbsp;</span>\n            <button onClick={() => props.handleDelete(props.id, props.name, props.setPersons)}>\n                Delete contact\n            </button>\n        </p>\n    )\n}\n\nconst Filter = (props) => {\n    return (\n        <div>\n            filter shawn with:\n            <input\n                value={props.filter}\n                onChange={props.handleFilterChange}\n            />\n        </div>\n    )\n}\n\nconst PersonForm = (props) => {\n    return (\n        <form onSubmit={props.addPerson}>\n            <div>\n                name:\n                    <input\n                    value={props.newName}\n                    onChange={props.handleNameChange}\n                />\n            </div>\n            <div>\n                number:\n                    <input\n                    value={props.newNumber}\n                    onChange={props.handleNumberChange}\n                />\n            </div>\n            <div>\n                <button\n                    type=\"submit\">add\n                    </button>\n            </div>\n        </form>\n    )\n}\n\nconst Persons = (props) => {\n    const filteredPersons = props.persons.filter(person =>\n        (person.name.toLowerCase().includes(props.filter.toLowerCase()))\n    )\n\n    const rows = () => filteredPersons.map(person =>\n        <Person\n            key={person.name}\n            name={person.name}\n            number={person.number}\n            handleDelete={props.handleDelete}\n            setPersons={props.setPersons}\n            id={person.id}\n        />\n    )\n    return (\n        <div>\n            {rows()}\n        </div>\n    )\n}\n\nconst MessageSuccess = ({ message }) => {\n    if (message === null) {\n        return null\n    }\n\n    const messageStyle = {\n        color: 'green',\n        background: 'lightgrey',\n        fontSize: 20,\n        borderStyle: 'solid',\n        borderRadius: 5,\n        padding: 10,\n        marginBottom: 10\n    }\n\n    return (\n        <div style={messageStyle}>\n            {message}\n        </div>\n    )\n}\n\nconst MessageError = ({ errorMessage }) => {\n    if (errorMessage === null) {\n        return null\n    }\n\n    const errorMessageStyle = {\n        color: 'red',\n        background: 'lightgrey',\n        fontSize: 20,\n        borderStyle: 'solid',\n        borderRadius: 5,\n        padding: 10,\n        marginBottom: 10\n    }\n\n    return (\n        <div style={errorMessageStyle}>\n            {errorMessage}\n        </div>\n    )\n}\n\nconst App = () => {\n    const [persons, setPersons] = useState([])\n    const [newName, setNewName] = useState('')\n    const [newNumber, setNewNumber] = useState('')\n    const [filter, setFilter] = useState('')\n    const [message, setMessage] = useState(null)\n    const [errorMessage, setErrorMessage] = useState(null)\n\n    useEffect(() => {\n        personService\n            .getAll()\n            .then(initialPersons => {\n                setPersons(initialPersons)\n            })\n    }, [])\n\n    const addPerson = (event) => {\n        event.preventDefault()\n        const personExistsList = persons.filter(person => (person.name === newName))\n        if (personExistsList.length > 0) {\n            const personExists = personExistsList[0]\n            const id = personExists.id\n            const updatePersonObject = { ...personExists, number: newNumber }\n            personService\n                .update(id, updatePersonObject)\n                .then(returnedPerson => {\n                    setPersons(persons.map(person => person.id !== id ? person : returnedPerson))\n                    setMessage(`Updated number for '${returnedPerson.name}'`)\n                    setTimeout(() => {\n                        setMessage(null)\n                    }, 5000)\n                    setNewName('')\n                    setNewNumber('')\n                })\n        } else if (newName.length === 0) {\n            window.alert(`name is empty`);\n        } else if (newNumber.length === 0) {\n            window.alert(`number is empty`);\n        } else {\n            const personObject = {\n                name: newName,\n                number: newNumber,\n            }\n            personService\n                .create(personObject)\n                .then(returnedPerson => {\n                    setPersons(persons.concat(returnedPerson))\n                    setMessage(`Added '${returnedPerson.name}'`)\n                    setTimeout(() => {\n                        setMessage(null)\n                    }, 5000)\n                    setNewName('')\n                    setNewNumber('')\n                })\n        }\n    }\n\n    const handleDelete = (id, name, setPersons) => {\n        if (window.confirm(`Delete contact ${name} ?`)) {\n            personService\n                .deleteOne(id)\n                .then(error => {\n                    setPersons(persons.filter(person => person.id !== id))\n                    setMessage(`Deleted '${name}'`)\n                    setTimeout(() => {\n                        setMessage(null)\n                    }, 5000)\n                })\n                .catch(error => {\n                    setErrorMessage(`Information of '${name}' has already been removed from server`)\n                    setTimeout(() => {\n                        setErrorMessage(null)\n                    }, 5000)\n                    setPersons(persons.filter(person => person.id !== id))\n                })\n        }\n    }\n\n    const handleNameChange = (event) => {\n        setNewName(event.target.value)\n    }\n\n    const handleNumberChange = (event) => {\n        setNewNumber(event.target.value)\n    }\n\n    const handleFilterChange = (event) => {\n        setFilter(event.target.value)\n    }\n\n    return (\n        <div>\n            <h2>Phonebook</h2>\n            <Filter\n                filter={filter}\n                handleFilterChange={handleFilterChange}\n            />\n            <h3>Add a new</h3>\n            <PersonForm\n                addPerson={addPerson}\n                newName={newName}\n                handleNameChange={handleNameChange}\n                newNumber={newNumber}\n                handleNumberChange={handleNumberChange}\n            />\n            <h3>Numbers</h3>\n            <MessageSuccess\n                message={message}\n            />\n            <MessageError\n                errorMessage={errorMessage}\n            />\n            <Persons\n                persons={persons}\n                filter={filter}\n                handleDelete={handleDelete}\n                setPersons={setPersons}\n            />\n        </div>\n    )\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n)"],"sourceRoot":""}